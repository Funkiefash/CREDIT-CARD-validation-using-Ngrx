{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/card-payment/card-payment.component.ts","webpack:///src/app/card-payment/card-payment.component.html","webpack:///src/app/services/payment.service.ts","webpack:///src/app/store/actions.ts","webpack:///src/app/store/credit-card-payment-store.module.ts","webpack:///src/app/store/effects.ts","webpack:///src/app/store/facade.ts","webpack:///src/app/store/index.ts","webpack:///src/app/store/reducer.ts","webpack:///src/app/store/selectors.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","router","creditCardPaymentFacade","title","toasterConfig","showCloseButton","tapToDismiss","positionClass","timeout","creditCard$","data$","subscribe","data","navigate","selector","templateUrl","styleUrls","AppModule","forFeature","instrument","maxAge","logOnly","production","declarations","providers","bootstrap","CardPaymentComponent","formBuilder","facade","unsubscribe$","currentDate","Date","currentMonth","getMonth","currentYear","getFullYear","errorMessage","buildForm","paymentForm","group","amount","required","pattern","nameOnCard","minLength","cardNumber","min","max","expirationMonth","maxLength","expirationYear","cardCVVNumber","controls","submitForm","status","expiryDate","get","value","paymentFormData","creditCardNumber","toString","cardHolder","expirationDate","securityCode","makePayment","next","complete","onSubmit","PaymentService","http","paymentData","response","message","body","providedIn","CreditCardPaymentActionType","load","LOAD_CREDIT_CARD","loadSuccess","LOAD_CREDIT_CARD_SUCCESS","payWithCard","PAY_WITH_CARD","payWithCardSuccess","PAY_WITH_CARD_SUCCESS","payWithCardError","refresh","REFRESH","CreditCardPaymentStoreModule","CreditCardPaymentStoreEffects","dataService","toasterService","actions$","proceedPayment$","pipe","action","returnedAction","pop","creditCardData","error","CreditCardPaymentFacade","store","getCreditCardState","dispatch","moduleFeatureKey","initialModuleState","selectFeature","moduleReducers","factory","featureKey","initialCreditCardState","initialState","isLoading","featureReducer","state","reducer","selectCreditCardState","getPaymentState","CreditCardQuery","environment","bootstrapModule","err","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AppComponent } from './app.component';\nimport { CardPaymentComponent } from './card-payment/card-payment.component';\n\nconst routes: Routes = [\n  {\n    path: 'app',\n    component: AppComponent,\n  },\n  {\n    path:'payment',\n    component: CardPaymentComponent\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToasterConfig } from 'angular2-toaster';\nimport { Observable } from 'rxjs';\nimport { CreditCardPaymentFacade } from './store/facade';\nimport { CreditCardState } from './models/credit-card.interface';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'Fasipe-Test';\n  toasterConfig: ToasterConfig;\n  creditCard$: Observable<CreditCardState>;\n\n  constructor(private router: Router, private creditCardPaymentFacade: CreditCardPaymentFacade) {\n\n    this.toasterConfig = new ToasterConfig({\n      showCloseButton: true,\n      tapToDismiss: true,\n      positionClass: 'toast-top-full-width',\n      timeout: 3000\n    });\n    this.creditCard$ = this.creditCardPaymentFacade.data$;\n  }\n\n  ngOnInit() {\n    this.creditCard$.subscribe(data => {\n    })\n  }\n\n\n  navigate(){\n    this.router.navigate(['/payment']);\n  }\n}\n","<div class=\"card card-small\" (click)=\"navigate()\" tabindex=\"0\"style = \"background-color:green\">\n  <svg\n    class=\"material-icons\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n  >\n    <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\" />\n  </svg>\n\n  <span>Make Card Payment</span>\n</div>\n<div class=\"card card-large\">\n  store:\n\n  {{ creditCard$ | async | json }}\n</div>\n<div class=\"view-container\" style = \"width: 600px; height: 400px; margin: auto; background-color:rgb(145, 146, 146)\">\n \n  \n  <toaster-container [toasterconfig]=\"toasterConfig\"></toaster-container>\n\n  <router-outlet></router-outlet>\n</div>\n<div class=\"box\"> <img src=\"Img/Credit-Card.jpg\" alt=\"Credit Card\"></div>\n  <div ng-view class=\"view-frame\"></div> \n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport * as storeModuleConfiguration from './store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CreditCardPaymentStoreEffects } from './store/effects';\nimport { CardPaymentComponent } from './card-payment/card-payment.component';\nimport { PaymentService } from './services/payment.service';\nimport { RouterModule } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CreditCardPaymentStoreModule } from './store';\nimport { ToasterModule, ToasterService } from 'angular2-toaster';\nimport { CreditCardPaymentFacade } from './store/facade'\nimport { CommonModule } from '@angular/common';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { environment } from '../environments/environment';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CardPaymentComponent,\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    ToasterModule,\n    CommonModule,\n    CreditCardPaymentStoreModule,\n    BrowserAnimationsModule,\n    StoreModule.forRoot({}),\n    HttpClientModule,\n    EffectsModule.forRoot(),\n    StoreModule.forFeature(storeModuleConfiguration.moduleFeatureKey, storeModuleConfiguration.moduleReducers),\n    EffectsModule.forFeature([CreditCardPaymentStoreEffects]),\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production })\n  ],\n  providers: [PaymentService, ToasterService, CreditCardPaymentFacade, CreditCardPaymentStoreEffects],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ToasterService } from 'angular2-toaster';\nimport { Subject } from 'rxjs';\nimport { CreditCardPaymentFacade } from '../store/facade';\nimport { currentDate } from '../store/reducer';\nimport { PaymentService } from '../services/payment.service';\n\n@Component({\n  selector: 'app-card-payment',\n  templateUrl: './card-payment.component.html',\n  styleUrls: ['./card-payment.component.scss']\n})\nexport class CardPaymentComponent implements OnInit, OnDestroy {\n  unsubscribe$ = new Subject();\n\n  paymentForm: FormGroup;\n  errorMessage: string;\n  currentDate = new Date();\n  currentMonth = currentDate.getMonth() + 1;\n  currentYear = currentDate.getFullYear();\n\n  constructor(private formBuilder: FormBuilder, private facade: CreditCardPaymentFacade) { }\n\n  ngOnInit() {\n    this.errorMessage = \"Please Fill all fields\";\n    this.buildForm();\n  }\n\n\n  buildForm() {\n    this.paymentForm = this.formBuilder.group({\n      amount: ['', [Validators.required, Validators.pattern(/^-?(0|[1-9]\\d*)?$/)]],\n      nameOnCard: ['', [Validators.required,Validators.minLength(1),Validators.pattern('^[A-Za-z][A-Za-z -]*$')]],\n      cardNumber: ['', [Validators.required,Validators.minLength(16),Validators.min(1111111111111111),Validators.max(9999999999999999)]],\n      expirationMonth: ['', [Validators.required,Validators.minLength(1),Validators.maxLength(2),Validators.min(this.currentMonth),Validators.max(12)]],\n      expirationYear: ['', [Validators.required,Validators.minLength(4),Validators.maxLength(4),Validators.min(this.currentYear),Validators.max(9999)]],\n      cardCVVNumber: ['', [Validators.required,Validators.minLength(3),Validators.maxLength(3),Validators.min(111),Validators.max(999)]]\n    });\n  }\n\n // convenience getter for easy access to form fields\n get formControls() { return this.paymentForm.controls; }\n\n onSubmit() {\n   this.submitForm();\n  }\n\n  submitForm() {\n  if (this.paymentForm.status === 'VALID') {\n    const expiryDate = new Date(this.paymentForm.get('expirationYear').value, this.paymentForm.get('expirationMonth').value, 1)\n    const paymentFormData = {\n      creditCardNumber: this.paymentForm.get('cardNumber').value.toString(),\n      cardHolder: this.paymentForm.get('nameonCard').value,\n      expirationDate: expiryDate,\n      securityCode: this.paymentForm.get('cardCVVNumber').value,\n      amount: +this.paymentForm.get('amount').value,\n    };\n\n    this.facade.makePayment(paymentFormData);\n   \n  } else {\n    this.errorMessage = \"the Form is Invalid!\";\n  }\n  }\n\n  ngOnDestroy(){\n    this.unsubscribe$.next();\n    this.unsubscribe$.complete();\n  }\n\n}\n","\n<link href=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css\" rel=\"stylesheet\" id=\"bootstrap-css\">\n<script src=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js\"></script>\n<script src=\"//code.jquery.com/jquery-1.11.1.min.js\"></script>\n\n<div class=\"container\">\n  <form class=\"form-horizontal\" role=\"form\" [formGroup]=\"paymentForm\" (ngSubmit)=\"onSubmit()\">\n    <fieldset>\n      <legend>Credit Card Payment</legend>\n      <div class=\"form-group\">\n        <label class=\"col-sm-3 control-label\" for=\"card-holder-name\">Amount</label>\n        <div class=\"col-sm-9\">\n          <input class=\"form-control\" type=\"text\" formControlName=\"amount\" [ngClass]=\"{ 'is-invalid': (formControls.amount.dirty || formControls.amount.touched) && formControls.amount.errors }\" placeholder=\"Enter Amount Here...\">\n          <div *ngIf=\"!formControls.amount.valid && (formControls.amount.dirty || formControls.amount.touched)\" class=\"invalid-feedback\">\n              <div *ngIf=\"formControls.amount.errors\" class=\"alert alert-danger\">Invalid Amount.</div>\n          </div>\n          </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-sm-3 control-label\" for=\"card-holder-name\">Name</label>\n        <div class=\"col-sm-9\">\n          <input class=\"form-control\" type=\"text\" formControlName=\"nameOnCard\" placeholder=\"Enter Name Here...\" [ngClass]=\"{ 'is-invalid': (formControls.nameOnCard.dirty || formControls.nameOnCard.touched) && formControls.nameOnCard.errors }\">\n          <div *ngIf=\"!formControls.nameOnCard.valid && (formControls.nameOnCard.dirty || formControls.nameOnCard.touched)\" class=\"invalid-feedback\">\n              <div *ngIf=\"formControls.nameOnCard.errors\" class=\"alert alert-danger\">Invalid Cardholder Name.</div>\n          </div>\n          </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-sm-3 control-label\" for=\"card-number\">Card Number</label>\n        <div class=\"col-sm-9\">\n          <input class=\"form-control\" type=\"number\" formControlName=\"cardNumber\" placeholder=\"Enter Card Number Here...\" [ngClass]=\"{ 'is-invalid': formControls.cardNumber.errors  && (formControls.cardNumber.dirty || formControls.cardNumber.touched)}\">\n          <div *ngIf=\"!formControls.cardNumber.valid && (formControls.cardNumber.dirty || formControls.cardNumber.touched)\" class=\"invalid-feedback\">\n              <div *ngIf=\"formControls.cardNumber.errors\" class=\"alert alert-danger\">Invalid Card Number.</div>\n          </div>\n          </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-sm-3 control-label\" for=\"expiry-month\">Expiration Date</label>\n        <div class=\"col-sm-9\">\n          <div class=\"row\">\n            <div class=\"col-xs-3\">\n\n              <select class=\"form-control col-sm-2\" formControlName=\"expirationMonth\" id=\"MM\" [ngClass]=\"{ 'is-invalid': !formControls.expirationMonth.valid && (formControls.expirationMonth.dirty || formControls.expirationMonth.touched) }\">\n                <option>Month</option>\n                <option value=\"01\">Jan (01)</option>\n                <option value=\"02\">Feb (02)</option>\n                <option value=\"03\">Mar (03)</option>\n                <option value=\"04\">Apr (04)</option>\n                <option value=\"05\">May (05)</option>\n                <option value=\"06\">June (06)</option>\n                <option value=\"07\">July (07)</option>\n                <option value=\"08\">Aug (08)</option>\n                <option value=\"09\">Sep (09)</option>\n                <option value=\"10\">Oct (10)</option>\n                <option value=\"11\">Nov (11)</option>\n                <option value=\"12\">Dec (12)</option>\n              </select>\n            </div>\n            <div class=\"col-xs-3\">\n              <select class=\"form-control\" formControlName=\"expirationYear\" id= \"YYYY\" [ngClass]=\"{ 'is-invalid': formControls.expirationYear.errors && (formControls.expirationYear.dirty || formControls.expirationYear.touched) }\" >\n                <option value=\"2019\">2019</option>\n                <option value=\"2020\">2020</option>\n                <option value=\"2021\">2021</option>\n                <option value=\"2022\">2022</option>\n                <option value=\"2023\">2023</option>\n                <option value=\"2024\">2024</option>\n              </select>\n            </div>\n            <div *ngIf=\"( !formControls.expirationMonth.valid && (formControls.expirationMonth.dirty || formControls.expirationMonth.touched) ) || ( !formControls.expirationYear.valid && (formControls.expirationYear.dirty || formControls.expirationYear.touched))\" class=\"invalid-feedback\">\n              <div *ngIf=\"formControls.expirationMonth.errors || formControls.expirationYear.errors\" class=\"alert alert-danger\">Invalid Date of Expiration.</div>\n          </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label class=\"col-sm-3 control-label\" for=\"cvv\">Card CVV</label>\n        <div class=\"col-sm-3\">\n          <input class=\"form-control\" formControlName=\"cardCVVNumber\" placeholder=\"123\" [ngClass]=\"{ 'is-invalid': formControls.cardCVVNumber.errors && (formControls.cardCVVNumber.dirty || formControls.cardCVVNumber.touched) }\">\n          <div *ngIf=\"!formControls.cardCVVNumber.valid && (formControls.cardCVVNumber.dirty || formControls.cardCVVNumber.touched)\" class=\"invalid-feedback\">\n              <div *ngIf=\"formControls.cardCVVNumber.errors\" class=\"alert alert-danger\">Invalid CVV / CVC Number.</div>\n          </div>\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <div class=\"col-sm-offset-3 col-sm-9\">\n          <button type=\"submit\" class=\"btn btn btn-success\">Proceed</button>\n        </div>\n      </div>\n    </fieldset>\n      <div *ngIf=\"paymentForm.invalid\" class=\"alert alert-danger\">{{errorMessage}}</div>\n  </form>\n</div>\n\n\n","import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpErrorResponse,\n  HttpParams,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class PaymentService {\n  constructor(private http: HttpClient) {}\n\n  makePayment(paymentData): Observable<any> {\n    const response = {\n      status: 'success',\n      message: 'Payment processed successfully!',\n    };\n    return of(new HttpResponse({ status: 200, body: response }));\n  }\n}\n","\nimport { createAction, props } from '@ngrx/store';\nimport { CreditCardState } from '../models/credit-card.interface';\n\nexport enum CreditCardPaymentActionType {\n  LOAD_CREDIT_CARD = '[CreditCardPayment] Load',\n  LOAD_CREDIT_CARD_SUCCESS = '[CreditCardPayment] Load Success',\n  REFRESH = '[CreditCardPayment] Refresh',\n  PAY_WITH_CARD = '[CreditCardPayment] Pay',\n  PAY_WITH_CARD_SUCCESS = '[CreditCardPayment] Payment Success',\n  PAY_WITH_CARD_ERROR = '[CreditCardPayment] Submit Success'\n}\n\nexport const load = createAction(CreditCardPaymentActionType.LOAD_CREDIT_CARD);\n\nexport const loadSuccess = createAction(\n  CreditCardPaymentActionType.LOAD_CREDIT_CARD_SUCCESS,\n  props<{ creditCardData: CreditCardState }>()\n);\n\nexport const payWithCard = createAction(\n  CreditCardPaymentActionType.PAY_WITH_CARD,\n  props<{ paymentData: CreditCardState }>()\n);\n\nexport const payWithCardSuccess = createAction(\n  CreditCardPaymentActionType.PAY_WITH_CARD_SUCCESS,\n  props<{ creditCardData: CreditCardState }>()\n);\n\nexport const payWithCardError = createAction(\n  CreditCardPaymentActionType.PAY_WITH_CARD_SUCCESS,\n  props<{ error: string }>()\n);\n\n\nexport const refresh = createAction(CreditCardPaymentActionType.REFRESH);\n\n","\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StoreModule } from '@ngrx/store';\nimport { reducer } from './reducer';\nimport * as storeModuleConfiguration from '.';\nimport { CreditCardPaymentStoreEffects } from './effects';\nimport { EffectsModule } from '@ngrx/effects';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n  ]\n})\nexport class CreditCardPaymentStoreModule { }\n","import { get } from 'lodash';\nimport { of } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport {\n  catchError,\n  concatMap,\n  map,\n  switchMap,\n  mergeMap,\n  filter,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { routerNavigatedAction } from '@ngrx/router-store';\n\n// import { CreditCardPaymentAdapter } from 'src/app/core/adapter';\nimport { PaymentService } from '../services/payment.service';\nimport {\n  load,\n  loadSuccess,\n  payWithCard,\n  payWithCardError,\n  payWithCardSuccess,\n} from './actions';\nimport { ToasterService } from 'angular2-toaster';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class CreditCardPaymentStoreEffects {\n  constructor(\n    private dataService: PaymentService,\n    private toasterService: ToasterService,\n    private router: Router,\n    private actions$: Actions\n  ) {}\n\n  proceedPayment$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(payWithCard),\n      concatMap((action) => {\n        return of(action).pipe(withLatestFrom());\n      }),\n      mergeMap(([action]) => {\n        const { paymentData } = action;\n        let returnedAction;\n        return this.dataService.makePayment(paymentData).pipe(\n          map((response) => {\n            if (response.body.status === 'success') {\n              this.toasterService.pop(\n                'success',\n                'SUCCESSFUL',\n                'Your payment was successful'\n              );\n              this.router.navigate([''])\n              returnedAction = payWithCardSuccess({creditCardData: paymentData});\n            } else {\n              this.toasterService.pop(\n                'error',\n                'FAILURE',\n                'Your payment Failed please try again later'\n              );\n              returnedAction = payWithCardError({\n                error: 'Something went wrong please try again',\n              });\n            }\n            return returnedAction;\n          }),\n          catchError((error) => of(payWithCardError({ error })))\n        );\n      })\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { select, State, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { CreditCardState } from '../models/credit-card.interface';\nimport { load, payWithCard, payWithCardSuccess } from './actions'\nimport { CreditCardQuery } from './selectors';\n\n@Injectable()\nexport class CreditCardPaymentFacade {\n  readonly data$: Observable<CreditCardState>;\n\n  constructor(private store: Store) {\n    this.data$ = this.store.pipe(select(CreditCardQuery.getCreditCardState));\n  }\n\n  getCreditCardData() {\n    this.store.dispatch(load());\n  }\n\n  makePayment(paymentData: CreditCardState) {\n    this.store.dispatch(payWithCard({paymentData}))\n  }\n\n  storeCard(creditCardData) {\n    this.store.dispatch(payWithCardSuccess(creditCardData))\n  }\n}\n","\nimport * as fromCreditCardPaymentStoreActions from './actions';\nimport * as fromCreditCardPaymentStoreEffects from './effects';\nimport * as fromCreditCardPaymentStoreSelectors from './selectors';\nimport * as fromCreditCardPaymentStoreReducer from './reducer';\nimport { CreditCardState } from '../models/credit-card.interface';\nimport { ActionReducerMap, createFeatureSelector } from '@ngrx/store';\nimport { InjectionToken } from '@angular/core';\nimport { PaymentState } from './reducer';\nexport {\n    CreditCardPaymentStoreModule\n} from './credit-card-payment-store.module';\n\nexport {\n    fromCreditCardPaymentStoreActions,\n    fromCreditCardPaymentStoreEffects,\n    fromCreditCardPaymentStoreSelectors,\n    fromCreditCardPaymentStoreReducer\n};\n\nexport const moduleFeatureKey = 'payment';\n\nexport interface paymentModuleState {\n  [fromCreditCardPaymentStoreReducer.featureKey]: PaymentState;\n}\n\nexport const initialModuleState: paymentModuleState = {\n  [fromCreditCardPaymentStoreReducer.featureKey]: fromCreditCardPaymentStoreReducer.initialState,\n};\n\nexport interface State {\n  [moduleFeatureKey]: paymentModuleState;\n}\n\nexport const selectFeature = createFeatureSelector<State, paymentModuleState>(moduleFeatureKey);\n\nexport const moduleReducers = new InjectionToken<ActionReducerMap<paymentModuleState>>(moduleFeatureKey, {\n  factory: () => ({\n    [fromCreditCardPaymentStoreReducer.featureKey]: fromCreditCardPaymentStoreReducer.reducer,\n  })\n});\n\n","\nimport { Action, createReducer, on } from '@ngrx/store';\nimport { CreditCardState } from '../models/credit-card.interface';\nimport * as creditCardPaymentActions from './actions';\n// import { creditCardPaymentAdapter, initialState, State } from './state';\n\nexport const featureKey = 'creditCard';\nexport const currentDate = new Date();\n\nexport const initialCreditCardState: CreditCardState = {\n  creditCardNumber: '',\n  cardHolder: '',\n  expirationDate: currentDate,\n  securityCode: '',\n  amount: 0,\n}\n\nexport interface PaymentState {\n  isLoading?: boolean;\n  error?: any;\n  creditCardData?: CreditCardState;\n}\n\nexport const initialState: PaymentState = {\n  isLoading: false,\n  error: null,\n  creditCardData: initialCreditCardState\n};\n\n\nconst featureReducer = createReducer(\n  initialState,\n  on(creditCardPaymentActions.load, state => ({\n    ...state,\n    isLoading: true,\n    error: null\n  })),\n  on(creditCardPaymentActions.loadSuccess, (state, { creditCardData }) => {\n    return  {\n      ...state,\n      creditCardData,\n      isLoading: false,\n      error: null\n    };\n  }),\n  on(creditCardPaymentActions.payWithCardSuccess, (state, { creditCardData }) => ({\n    ...state,\n    creditCardData,\n    isLoading: false,\n    error: null\n  }))\n);\n\nexport function reducer(state: PaymentState, action: Action) {\n  return featureReducer(state, action);\n}\n","\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\n\nimport { moduleFeatureKey } from \".\";\nimport { CreditCardState } from \"../models/credit-card.interface\";\nimport { featureKey, PaymentState } from \"./reducer\";\n\nexport const selectCreditCardState = (state): PaymentState => state[moduleFeatureKey][featureKey];\nconst getPaymentState = createSelector(selectCreditCardState, state => state);\nconst getCreditCardState = createSelector(selectCreditCardState, state => state.creditCardData);\n\nexport const CreditCardQuery = {\n  selectCreditCardState,\n  getCreditCardState,\n  getPaymentState\n};\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}